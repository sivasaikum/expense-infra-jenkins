pipeline {
    agent {label 'STAGE-1'}
    environment {
        PROJECT = 'expense'
        COMPONENT = 'backend'
        appVersion = ''
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices:['apply','destroy'], description: 'pick something')
    }
    stages {
        stage ('INIT') {
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                        sh """
                            cd 10-sg
                            terraform init -reconfigure
                            terraform plan
                        """
                    }
                }
            }
        }

        stage('APPLY') {
            // input {
            //     message "should we continue ?"
            //     ok "yes, please go ahead"
            // }
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                        sh """
                            cd 10-sg/
                            terraform apply -auto-approve

                        """
                    }
                }
            }
        }

        stage('Parallel Stages') {
            when {
                expression {
                    params.ACTION == 'apply'
                }
            }
            parallel {
                stage ('20-bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }

                stage('30-rds') {
                    steps {
                        build job: '30-rds', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }

                stage('40-eks'){
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }

                stage'(50-ecr'){
                    steps {
                        build job: '50-ecr', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }
            }
        }
    }
    post {
        always {
            echo " This is a joindevops Expense project build"
            deleteDir()
        }
        failure {
            echo " This pipeline is failed for some reason"
        }
        success {
            echo "This pipeline is success"
        }
    }
}