pipeline {
    agent {label 'STAGE-1'} 
    environment {
        PROJECT = 'expense'
        COMPONENT = 'backend'
        appVersion = ''
    }
    options {
        disableConcurrentBuilds()
        timeout(time : 30 , unit: 'MINUTES')
        ansiColor('xtrem')
    }

    stages {
        stage('INIT') {
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                        sh """
                            cd 70-ingress-alb
                            terraform init -reconfigure
                            
                        """
                    }
                }
            }
        }

        stage('APPLY and DESTROY') {
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                        if(params.ACTION == 'apply'){
                            sh """
                                cd 70-ingress-alb
                                terraform plan
                                terraform apply -auto-approve
                            """
                        }else {
                            sh """
                            cd 70-ingress-alb
                            terraform destroy -auto-approve

                            """
                        }
                    }
                }
            }
        }

        stage('destroy infra') {
            when {
                expression {
                    params.ACTION == 'destroy'

                }
            }
            steps {
                script {
                    withAWS (region: 'us-east-1', credentials: 'aws-cred'){
                        def list = ["60-acm", "50-ecr", "40-eks", "30-rds", "20-bastion", "10-sg", "00-vpc"]
                        for (items in list) {
                            sh """
                            cd $items
                            terraform init -reconfigure
                            terraform destroy -auto-approve

                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo " This is a joindevops Expense project build"
            deleteDir()
        }
        failure {
            echo " This pipeline is failed for some reason"
        }
        success {
            echo "This pipeline is success"
        }
    }
}